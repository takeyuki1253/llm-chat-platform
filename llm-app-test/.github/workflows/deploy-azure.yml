name: Deploy to Azure

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/llm-chat-frontend:${{ github.sha }} ./frontend
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/llm-chat-frontend:${{ github.sha }}

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/llm-chat-backend:${{ github.sha }} ./backend
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/llm-chat-backend:${{ github.sha }}

      - name: Deploy to Azure Container Instances
        uses: azure/aci-deploy@v1
        with:
          resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
          dns-name-label: llm-chat-${{ github.event.inputs.environment || 'staging' }}
          image: ${{ secrets.ACR_LOGIN_SERVER }}/llm-chat-backend:${{ github.sha }}
          registry-login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          registry-username: ${{ secrets.ACR_USERNAME }}
          registry-password: ${{ secrets.ACR_PASSWORD }}
          name: llm-chat-backend-${{ github.event.inputs.environment || 'staging' }}
          location: 'East US'
          ports: 8000
          environment-variables: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
            ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}

      - name: Deploy frontend to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "./frontend"
          api_location: ""
          output_location: "dist"
          app_build_command: "npm run build"

      - name: Run database migrations
        run: |
          # Install Azure CLI and run migrations
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az container exec --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --name llm-chat-backend-${{ github.event.inputs.environment || 'staging' }} \
            --exec-command "alembic upgrade head"

      - name: Post-deployment health check
        run: |
          sleep 60 # Wait for deployment to stabilize
          curl -f https://llm-chat-${{ github.event.inputs.environment || 'staging' }}.eastus.azurecontainer.io/health

      - name: Notify Slack on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}